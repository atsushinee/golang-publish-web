// Code generated by go-bindata.
// sources:
// data/publish.db
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataPublishDb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\xdd\x5f\x6c\xdb\xc6\x1d\x07\xf0\x3b\x1e\x29\x9a\x8a\xa5\x73\xea\x28\xaa\x6b\xa4\xa6\x27\x08\x8b\x10\xbb\xb1\xa4\xfc\x73\x86\x0c\xcb\x32\x61\x30\x92\x38\x7f\x6a\x03\xcd\xfe\x40\x52\x28\xba\xd1\x20\x4b\x8a\xfe\xc4\x0d\xf6\xd0\xca\xc6\xb2\x15\x79\x68\xd3\x05\x5b\xba\x97\x21\x1d\xd0\xe6\x65\x01\xba\x21\x5d\xeb\xb4\x79\x18\xba\x61\x58\x87\xa0\x28\xf6\xb0\x01\x05\xb6\xac\x71\x9c\x6c\x28\xb0\x2d\x29\x02\x6c\x2f\x03\x4f\xb2\x44\xfd\x4b\x02\xcf\x85\x00\xfb\xfb\x01\x5c\x92\x77\x3c\xde\xfd\xc8\xe3\xb1\x47\xc9\xf1\xd3\x47\x0e\x24\x0b\xa6\x3e\x95\xc9\x4d\xc7\x0b\x7a\x98\xf4\x10\x4a\xc9\x57\x74\x9d\x10\x12\x21\x84\x78\x49\x4d\x2f\x21\x44\xb6\x6d\x53\xf2\x70\x11\xf2\xd4\xd0\x61\x97\x76\x82\x6c\x64\x67\x09\xef\x71\x5f\x73\x7f\xcb\x75\xc3\xf5\x7c\xf7\xed\x75\x1f\x3a\x3f\x76\xee\xd4\x7e\xa3\x65\xbb\x7e\xae\x6d\x57\x6f\xa8\x07\x1d\xaf\xa8\x4f\x28\xf7\x95\x17\x95\x7e\x79\x3f\x3b\xfb\x08\xc7\x06\x58\x4d\x4a\x7b\x36\xaa\x5e\xbf\x9f\xce\xee\x29\xc4\x8f\xa7\xcc\x44\xc6\x88\x9e\x4a\x9a\x33\xd1\x54\xe6\x59\xfb\xba\x77\xdf\xd1\xc8\xde\x89\x88\x3e\xb1\xf7\xab\x07\x22\x7a\xcc\x9e\x15\xd3\x37\xc7\x92\x89\x98\x3e\x36\x3e\x11\xf9\x7a\xe4\xa8\x7e\xf8\xe8\xd8\xc1\xbd\x47\x8f\xe9\xfb\x23\xc7\xf4\xbd\x93\x13\x87\xc6\xc6\xf7\x1d\x8d\x1c\x8c\x8c\x4f\xe8\xe3\x87\x26\xf4\xf1\xc9\x03\x07\x86\xca\x07\xb0\x17\xaa\x24\x8b\x63\x16\xf3\x66\xae\x6d\x66\x21\x39\x6d\xc6\xf4\x89\xc8\x33\xe5\x43\x05\x4a\x07\x3d\xaa\xb7\xb7\x97\xce\xd1\xa5\xf6\x27\x32\xc6\xc6\xa6\xd6\x2e\xab\x91\xe9\x78\x5d\x5d\x43\x7a\x2c\xdb\xa2\x59\xc5\x56\x69\xb9\x54\x7d\xc1\xc2\xe9\x6c\xc3\xa1\x8c\x9c\x19\x2f\x98\x4d\xf1\xa4\x36\xa8\xde\xf0\x20\x2d\xad\x4f\xa6\x13\xe6\x73\x93\x47\x22\xd1\x78\x62\x3a\x99\x8e\x4e\x9b\xe9\x62\x34\x1b\x2f\x9c\xa8\x6d\x7a\x2a\x51\x4e\x8e\x8f\x1d\x99\x8c\xe8\x63\xe3\x5f\x8b\x3c\xa3\xc7\x5a\x14\x89\xe9\x87\xc6\xf5\x58\x2d\xd1\x3a\x19\x22\x3d\x90\xea\x7d\x40\x6d\x56\xf8\xb5\xcd\x0d\x8f\x52\x5b\xf9\x8c\x35\xd7\x26\xd2\x03\xa5\xc7\x1f\x53\xbd\x83\x83\xb4\xf4\x5d\x71\xad\x6a\xbb\xd4\xd6\x7a\xeb\xaf\x5c\xfd\x51\xfe\xaf\x0b\x58\x4b\x2d\x9f\x92\xba\xd4\x40\x49\xe9\x51\xbd\x03\x03\xb4\x74\x4c\x34\x2d\x97\x49\x99\xa2\xda\xea\xca\xfa\xfa\x86\x55\xd3\xad\x76\xe5\xea\x7a\x40\xad\xa2\xe9\xd6\xe9\xf6\xa6\x6f\xd6\x45\xe9\xa1\xf2\xbe\x81\x40\x70\xbd\xc3\x1b\x19\xa0\x44\x5c\x8f\xfc\xc9\x54\xb2\x60\x46\xe3\xc5\x42\x46\x6c\x47\xab\xb5\x46\x83\xd5\xd5\xc7\x4a\xeb\xb9\xea\xf5\x78\xe8\xac\x22\x9a\x6e\xa5\x59\x3f\x3d\xf5\x0d\x5e\x91\x73\xd8\x7c\xfe\xca\x29\xcf\x9d\xa8\xbf\x03\x02\xa5\x31\xb7\xea\xdd\xb2\x85\xce\x8e\xd5\x4e\x67\xd6\xcc\x4d\x27\xf3\xf9\x64\x26\xdd\xb0\xc9\x5b\x9c\xda\x5a\xee\xb2\x1a\xdd\xee\x8a\xc4\x53\xa9\xcc\x4c\x34\x6e\x18\x66\x3e\x1f\x6d\x8e\x23\x93\x35\x73\xf1\x82\xa8\xd4\x36\xc2\x28\xdd\xf6\xae\x21\x46\x27\xab\x8d\xd5\x15\x57\x7d\xfb\xab\xe9\x56\xcb\x8b\x6d\x1a\xd2\xa6\x81\x0d\x5d\xa3\x28\xba\x46\xae\xd2\x35\x5c\x0f\xea\x1a\xd5\x5a\xa3\xc1\xea\xaa\x9b\x10\xd2\x65\x0d\xf2\x4f\xaf\x73\x78\xbf\xe8\xa1\xa7\xab\x77\xb9\xd8\xd1\xba\xb2\xd6\x4a\x77\xdb\x3b\xbb\xba\x5b\xf9\x9e\x5e\x0a\xaa\x7c\x37\x67\x9d\xa2\xdb\x95\xf6\x55\x2f\xb1\xf5\xb3\xae\xf9\x62\xae\xd4\xad\x1b\x28\x7d\x41\x53\xbd\xfd\xfd\x74\xb6\x5f\x54\x99\x37\x45\x07\xa9\x2c\x9c\xf5\x15\x57\x52\x97\x55\x77\xa5\xac\x78\x06\xd9\xbb\x47\xab\x91\xbe\x10\x2d\x44\x53\x75\xdd\xe5\x64\x97\xea\xdd\xb3\x87\xce\x16\xcb\x83\x5c\x36\x9b\x4a\x1a\xa2\x53\x45\x13\x99\x99\x74\x2a\x13\x4f\x58\x4f\xcd\x76\xe9\x5a\xc3\x00\xd8\x66\xb7\x65\xc5\x65\x3f\x58\x8b\x50\xaa\xc7\x6f\xf7\x00\xae\xee\xd0\xf8\xd0\x9a\xf5\xa8\xaa\xd7\xe7\xa3\x73\x27\x1b\x63\xb6\xad\x76\xb5\x8d\x6c\x59\xc1\x64\x73\x99\x44\xd1\x28\x44\xdb\xdc\x60\xad\xae\xd5\x29\x33\x27\xae\x6b\xf3\x90\xb6\x94\x63\x64\x12\x66\x73\xd8\x66\xde\x68\xe8\x08\x8d\x8f\xf7\x36\x0f\xf3\xd2\x06\x87\xe8\xb0\xa5\xe7\xc5\x79\xa9\x34\xb9\xb2\x50\xeb\xcf\x47\x25\x75\xb9\xe7\xe2\x3b\x66\xe3\xb9\x68\x7f\x1f\xc5\x14\xd5\x3b\xdc\x4f\x4b\x4a\x75\x3c\x58\x3a\x80\xb5\x77\x65\xdd\xd1\x76\x54\xb0\xef\x5c\x1e\x18\x2a\x29\xb5\xb1\xe1\xb4\x5c\x8e\x7b\x6c\x29\x6e\x2b\xbb\xb2\x50\x9a\xe2\x5e\x2a\xbb\x22\x83\x44\x8c\xa9\xde\xad\x1e\x5a\xd2\xaa\xc1\x89\xee\x6c\xfd\xc7\xda\xdd\x5a\xca\x6d\x43\xab\xdb\xb5\x1c\x9b\xb5\x25\x46\xf2\xa5\xd4\xc0\x61\xc9\x61\x3d\xdb\xca\x8f\x83\xca\x40\x9c\x37\x4f\x16\xcd\xb4\xd1\xb8\xc9\xea\x62\x6d\xc8\xdc\x6c\x1d\x6e\x28\x6f\x9e\x0c\x94\xa6\xa9\x18\x4b\xe7\xf6\x54\x1f\x31\xd6\x8f\xd4\xfc\x60\x59\xd6\x69\xaa\x05\xd4\xf8\xbf\x42\xad\x1e\xee\xf9\xfc\x4c\x26\x97\x78\x94\xfe\x3d\xa4\xc7\x52\xf1\x7c\xc1\x1a\x8f\x92\xe9\x07\x67\x26\xb3\xf6\xfb\xc2\x65\x4d\xe4\xf9\x45\xc2\x2f\x76\x7a\xfa\x03\x00\x00\x00\x00\x00\x00\xb0\x86\x7d\x9b\x76\x11\xef\xc0\xc1\x70\x98\x8b\x4f\x60\x16\x2f\x5f\x5c\x7c\xf9\xcc\xc2\xb9\x0b\xdb\x12\xe1\xd0\xf1\xf8\x8e\x5d\xf1\xb0\x31\xb2\x7d\xe4\x78\x70\x57\x22\x14\xdf\x69\x24\xa6\x8c\x84\xb1\x73\xd4\x08\x05\x43\x23\xc1\xd1\xe1\xe0\xc8\xf0\xc8\x2e\x3d\x14\xda\x3d\xb2\x6d\x77\x68\x5b\x7d\x52\x28\xb4\x7b\x7b\xf8\x9b\xd6\xfc\xdf\xc1\xdf\x24\xfc\x3e\xff\x94\xff\x89\xff\x8e\x5f\xe3\x6f\x76\x3a\x64\x00\x00\x00\x00\x00\x00\x80\x35\x6f\x9d\x83\xf5\xd3\xca\xd7\xa2\x58\x97\xc2\x3c\x74\xda\x4c\x17\x65\xb7\xcc\x06\x69\xed\x3b\x9a\xac\x97\xb1\x2d\xb4\xe1\xfb\x7b\xee\x2e\x89\x79\x44\xa2\xac\x52\xe6\xd1\x8a\x79\x33\xe7\x14\x9f\xff\xdf\x27\xfc\x7e\xa7\x03\x03\x00\x00\x00\x00\x00\x00\x80\x15\xd6\xc5\xbc\x9a\x78\x5b\xe0\xb2\xb6\x7a\x3a\xdd\x1c\x00\x00\x00\x00\x00\x00\x00\xf8\x3c\x39\x09\xe6\xff\x00\x00\x00\x00\x00\x00\x00\xab\x1d\x3e\xff\x07\x00\x00\x00\x00\x00\x00\x58\xfd\x30\xff\x07\x00\x00\x00\x00\x00\x00\x58\xfd\x30\xff\x07\x00\x00\x00\x00\x00\x00\x58\xfd\x96\xe6\xff\xfc\xd7\x9d\x6e\x09\x00\x00\x00\x00\x00\x00\x00\x3c\xd0\x97\x27\xb5\xf0\x8e\xd0\xc8\x54\x70\xfb\x68\x78\xd8\xd8\x11\x3e\x3e\xbc\xcd\x88\x4f\x0d\x8f\x1a\x46\x7c\xd8\x30\xe3\x89\xf0\xce\xf0\xe8\xd4\xd4\x68\x22\x34\x12\x1c\x1d\x0e\x8e\x0c\x07\x83\x7a\x28\xb4\x3b\x14\xda\xbd\x3d\x6c\xcd\xff\x65\xfe\x0e\xe1\xff\xe6\x37\xf8\xef\xf9\x3b\x9d\x0e\x05\x00\x00\x00\x00\x00\x00\x00\x6c\xb8\xcc\x88\xff\xd6\xab\x97\xef\xbc\xf0\x93\xc5\xf3\x97\x6e\xfd\xe0\x57\x1e\xc6\x48\xf0\xce\xdc\xa5\x3b\x3f\xbe\xb4\x70\xe6\x7b\x77\xe6\x2e\xdd\x9c\x9f\x5f\x38\x77\x81\x4b\x8c\xf8\x17\xde\x7d\x61\xe1\xa5\x73\xe5\x84\x6e\xca\xc8\xc0\xe2\xe5\x8b\x8b\x2f\x9f\x59\x38\x77\xc1\x29\xe6\xff\xf3\x84\xff\x8d\xcf\xf3\xbb\xfc\x83\x4e\x87\x05\x00\x00\x00\x00\x00\x00\x00\x76\x3d\xcc\x4f\xed\xf3\x7f\x79\x23\x0b\xd2\xe6\xf9\x3f\xb3\xf6\xb3\xcf\xff\xa5\x6e\x36\xa0\x55\xe7\xff\x2e\x42\x88\xc4\x3f\x23\xfc\xbf\xfc\xb3\x4e\x47\x04\x00\x00\x00\x00\x00\x00\x00\x2b\x48\x96\x98\x46\x25\x46\x99\xa6\x39\xc5\xfc\xff\x9e\x35\xff\xbf\xd7\xe9\x66\x01\x00\x00\x00\x00\x00\x00\xc0\xca\x71\xc8\x1a\xa5\x92\x24\xcb\x9a\xa6\xb9\x08\x21\x6e\xf7\x5b\x84\xff\x9d\x7f\xc8\xaf\xf0\x57\xf9\x2c\x7f\x96\xef\xe7\x4f\xf1\x27\xb9\xe6\xbe\xeb\xfe\xc4\x7d\xdd\xfd\x56\xa7\xdb\x0b\x00\x00\x00\x00\x00\x00\x6b\xd5\x46\xb7\x42\xb4\x3e\xdf\xd6\x78\x62\x3a\x99\x3e\x95\x34\x67\xbe\x34\x9d\x49\x24\xa7\x4e\xf7\xba\x14\x42\x07\x3c\xf2\xd6\x44\x66\x26\x9d\xca\xc4\x13\x56\x9e\xbb\x5b\x21\xd4\x23\x12\x0d\x6b\x7b\xc3\x3a\x85\xd0\x41\x0f\xab\xee\x94\xb7\x52\x7b\x9d\xa2\x28\xab\x2f\xaa\x89\xa2\x6c\xa9\x68\x7f\x97\x55\xd4\x27\xd5\x17\xad\x54\xfe\x84\x6a\x1d\xc1\x96\x69\xcb\xeb\x73\x28\x84\x6e\xf2\x49\x5b\xb3\xc5\xe3\xa9\x64\xfe\x84\x2d\xcb\xa3\x58\x75\x88\x62\x86\xfd\x68\xb2\x42\xb4\x41\x5f\xcb\x9a\xfa\x98\x42\xb4\x01\x5f\xab\x8a\x1e\x97\x14\xa2\x6d\xf2\xb5\xa8\x67\x03\x55\x88\xe6\xf1\x35\x54\x53\xfe\xf7\xff\x5e\x23\xfc\x26\xff\x88\x5f\xe5\xaf\x75\xfa\xca\x02\x00\x00\x00\x00\x00\x00\xac\x4d\x5e\x59\x21\xfe\x3e\x6d\xf1\x97\x57\x17\xaf\xfe\xb4\xfc\x7b\xfb\xe5\xf7\x1e\x1e\xa6\x90\xbe\x01\x7a\xf3\xed\xb3\xb7\xdf\x7b\xaf\xfa\x2e\xe0\x70\x8f\xa4\x90\x3e\x0f\xbd\xf5\xa3\xef\xdf\xba\xf8\x33\x6b\xb6\xff\x8d\x27\xa8\x42\xfc\x9b\xe8\xc2\xfc\xf9\xc5\xf3\x97\x16\x5e\x3a\xb7\xf0\xf6\xdc\xd2\xfb\x81\x90\x35\xff\x77\xf2\x6b\x84\xff\x87\xdf\xe3\x9f\xf2\x45\xfe\x57\xfe\x67\xfe\x11\xff\x80\xbf\xcf\xaf\x75\x3a\x72\x00\x00\x00\x00\x00\x00\x00\xb0\xc8\x4e\xa6\x51\x59\xd1\x18\xa5\x32\x53\xba\xac\x85\xa4\xa8\x8c\x52\x89\x29\x0e\x46\x29\x63\x8a\x62\x2d\x24\x59\x66\x54\x93\x14\xc6\xc4\x17\xff\x25\xa6\x51\x26\x53\xa6\x51\xc9\x29\xe6\xff\x57\xac\xf9\xff\x5d\x7e\x85\xdf\xe4\xff\xe0\x7f\xe0\x1f\xf3\x3f\xf2\xf7\xf9\xbb\x9d\x8e\x0e\x00\x00\x00\x00\x00\x00\x60\x4d\x13\xbf\xc0\x2f\x3b\x55\x99\x5a\xf3\x7e\xad\xbc\x94\xba\xc4\x52\x62\xaa\x58\x32\xe6\x28\x2f\x25\xc5\x21\x53\x8d\x4a\x72\x39\x5b\x62\xa2\x34\x93\x14\x59\xa3\x9a\xe4\x22\x84\x30\xfe\x3a\xe1\x9f\xf0\xdf\xf2\xd7\x3b\x1d\x18\x00\x00\x00\x00\x00\x00\xc0\x5a\xf6\x24\x93\x89\x3f\x70\x73\xfe\x8d\x85\x1f\x96\xec\xbf\x02\xb0\x35\x9b\xcb\x24\x8a\x46\xa1\x5f\x92\x89\xdf\x77\xfb\x8d\x57\x6e\xbf\xf8\x8b\xba\xfc\x5c\x26\x65\xf6\x53\x2b\xb3\xfc\x47\x02\xeb\x32\x8b\x79\x33\xe7\x14\xf3\xff\xeb\x84\x5f\xe7\xff\xe4\x7f\xe9\x74\x9c\x00\x00\x00\x00\x00\x00\x00\xf0\x70\x3d\xcc\x4f\xed\x6f\x09\xc4\x1f\xff\xb7\xbf\x16\x90\x38\xf3\x6b\xf6\x57\x01\xb6\xf9\xff\x0d\xfe\xaf\x4e\xb7\x1f\x00\x00\x00\x00\x00\x00\x00\x1e\xee\x31\x16\xa0\xf5\xdf\x0c\x60\x9c\xf9\xa8\xed\xcb\x00\x92\x9b\xf9\x34\xdb\xe7\xff\x2e\xab\x58\x4f\xa7\xdb\x0d\x00\x00\x00\x00\x00\x00\x00\x9f\x27\xcc\xff\x01\x00\x00\x00\x00\x00\x00\x56\xbf\xff\x05\x00\x00\xff\xff\x7c\x69\xb6\x0f\x00\x70\x01\x00")

func dataPublishDbBytes() ([]byte, error) {
	return bindataRead(
		_dataPublishDb,
		"data/publish.db",
	)
}

func dataPublishDb() (*asset, error) {
	bytes, err := dataPublishDbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/publish.db", size: 94208, mode: os.FileMode(438), modTime: time.Unix(1570544598, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/publish.db": dataPublishDb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"publish.db": &bintree{dataPublishDb, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

